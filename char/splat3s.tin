#class {splat} {kill}
#class {splat} {open}

#var guild changeling

#read .tt/3s/pokedex.tin

#alias {autope}{
	#if {$my[autopersevere] != 1}{
		#var {my[autopersevere]} {1};
	}{
		#var {my[autopersevere]} {0};
	}
};

#gag {You will no longer dissipate attacks against you.}
#gag {You will no longer persevere.}
#gag {You focus on retaining your shape.}
#gag {You begin to concentrate on turning aside harmful attacks.}
#gag {Your cells rapidly freeze and die}
#gag {The supercooled regions cause your cells}
#gag {The searing heat that you are generating is damaging}
#gag {Cells blacken and die around your superheated regions!}
#gag {The tiny translucent bombardier beetle hit}
#gag {The tiny translucent wandering spider hit}
#gag {The tiny translucent bombardier beetle sighs.}
#gag {The tiny translucent wandering spider sighs.}
#gag {^You instinctively know that biting this being would have no effect.}
#gag {^You are not able to bite anything at this time!}
#gag {%1 writhes in pain as its flesh slowly rots!}

#gag {Energy pours into you, rejuvenating lost stamina and protoplasm!}
#gag {You resume accelerating your natural regeneration.}
#gag {You resume radiating heat.}
#gag {You resume radiating cold.}
#gag {When you persevere, you will dedicate %1 of your focus on retaining your shape.}
#gag {The chaotic energies revitalize you!}

#act {^You instinctively know that biting this being would have no effect.}{
	#var {my[bite][status]}{1};
};
#act {%1 flesh stops rotting}{
	#var {my[bite][status]}{0};
};
#act {^Your wounds close as you morph into a %1!}{
	#delay {2}{db_query_form_damage;select_current_form_biome};
};
#act {You morph into a %1!}{
	#delay {2}{db_query_form_damage;select_current_form_biome};
};
#act {^Your wounds close as you morph into an %1!}{
	#delay {2}{db_query_form_damage;select_current_form_biome};
};
#act {You morph into an %1!}{
	#delay {2}{db_query_form_damage;select_current_form_biome};
};

#alias kk {kill $kstr}
#alias k {kill %0}
#alias co {
	!give bioplast to Splat;
	!consume bioplast;
	!give bioplast to Splat;
	!consume bioplast;
};

#var resumebot 0;

#gag {HP[%1/%2] SP[%3/%4] ST[%5\%] PP[%6\%] CF[%7/%8\%] FF[%9] E%10 %11}
#act {HP[%1/%2] SP[%3/%4] ST[%5\%] PP[%6\%] CF[%7/%8\%] FF[%9] E[%10] %11}{
	#var {my[hp][current]}			{%1};
	#var {my[hp][max]}				{%2};
	#var {my[sp][current]}			{%3};
	#var {my[sp][max]}				{%4};
	#var {my[gp1][current]}			{%5};
	#var {my[stam][current]}		{%5};
	#var {my[gp2][current]}			{%6};
	#var {my[pp][current]}			{%6};
	#var {my[relinquish][current]}	{%7};
	#var {my[relinquish][reset]}	{%8};
	#var {my[ff][current]}			{%9};
	#replace {my[ff][current]}{%}{};

	#if {$my[gp1][current] > 95 && $my[gp2][current] > 95 && $resumebot} {
		#var resumebot 0;
		.resume;
	}

	#math {my[hp][deficit]} {$my[hp][max] - $my[hp][current]};
        
	#NOP Enemy parsing
	#if {"%10" != ""}{
		#var {my[attacker]}	{%10};
		#var {my[incombat]}	{1};
    }{
        #var {my[attacker]}	{0};
		#var {my[incombat]}	{0};
		#var {my[bite][status]}{0};
    };

    #if {"%11" != ""}{
        #var hpbarTmpInt 	{%11};
    }{
        #var hpbarInt 		{None};
    };
    #regex {$hpbarTmpInt}{%.%s%*}{
        #var hpbarInt 		{&3};
    };
    #regex {$hpbarInt} {A} {
        #var {my[adrenalize]}	 {1};
    } {
        #var {my[adrenalize]}	{0};
    };
    #regex {$hpbarInt}{H} {
        #var {my[hyperproliferate]}	{1};
    } {
        #var {my[hyperproliferate]}	{0};
    };
    #regex {$hpbarInt}{D} {
        #var {my[dissipate]}		{1};
    } {
        #var {my[dissipate]}		{0};
    };
    #regex {$hpbarInt}{V} {
        #var {my[perseverance][active]}	{1};
    } {
        #var {my[perseverance][active]}	{0};
    };
    #regex {$hpbarInt} {R:%d} {
        #var {my[relinq]}		{1};
    }{
        #var {my[relinq]}		{0};
    };

	#if {$my[gp1][current] < 10 || $my[gp2][current] < 20} {
		#if {$my[relinquish][current] > 0}{
			#if {$my[relinq] != 1} {
				!relinquish;
				#var {my[relinq]}	{1};
			};
		} {
			#if {$my[bioplasts] > 0} {
				!= give bioplast to splat;
				!consume bioplast;
			};
		};
		#if {$my[gp2][current] < 10}{
			!= give bioplast to splat;
			!consume bioplast;
		};
		#if {$my[gp1][current] < 10}{
			!= give bioplast to splat;
			!consume bioplast;
		};
	};

	#if {$my[sp][current] < 10 && $my[relinquish][current] > 2 && $my[relinq] != 1} {
			!relinquish;
			#var {my[relinq]}	{1};
	};

	#if {$my[relinquish][reset] > 90 && $my[relinquish][current] > 0 && $my[relinq] != 1 && !$idling} {
			!relinquish;
			#var {my[relinq]}	{1};
	};

    #if {$my[adrenalize] != 1} {
        #if {$my[sp][current] > 50} {
            !adrenalize on;
        };
    };

    #if {$my[hyperproliferate] != 1}{
        #if {$my[sp][current] > 50 && $my[relinq] != 1}{
            !hyperproliferate on;
        };
    };

	#if {$my[incombat] == 0}{
		#if {$my[hp][current] < $my[hp][max]}{
			!morph;
		};
	} {
		#if {${my[bite][status]} != 1}{
			!gouge;
			
			#NOP #if {"${my[form]}" != "white tail spider"}{
			#NOP 	!morph white tail;
			#NOP 	!bite;
			#NOP 	#delay {unmorph}{!morph ${my[returnform]}}{2};
			#NOP };
			#var {my[bite][status]}{1};
		};
		#if {$my[hp][deficit] > 500}{
			!morph;
		};
		#NOP #if {${my[hp[current]} < 1000 && ${my[pp][current]} < 10}{
		#NOP 	go home;
		#NOP };
	};
	#NOP #if {$my[hp][current] < 1000}{
	#NOP 	!morph;
	#NOP 	!morph;
	#NOP };
	#math {my[gpdiff]}{$my[gp1][current] - $my[gp2][current]};
	#if {$my[gpdiff] > 0} {
		#if {$my[dissipate] != 1} {
			!dissipate on;
			#var {my[dissipate]} {1};
		};
		#if {$my[gpdiff] > 10}{
			#if {$my[perseverance][active] != 1} {
				!perseverance on;
			};
			#if {$my[gpdiff] > 20} {
				#if {"$my[perseverance][level]" != "half"} {
					!perseverance half;
					#var {my[perseverance][level]} {half};
				};
			} {
				#if {"$my[perseverance][level]" != "some"} {
					!perseverance some;
					#var {my[perseverance][level]} {some};
				};
			};
		} {
			#if {$my[perseverance][active] == 1} {
				!perseverance off;
			};
		};
	} {
		#if {$my[dissipate] == 1} {
			!dissipate off;
			#var {my[dissipate]} {0};
		};
		#if {$my[perseverance][active] == 1} {
			!perseverance off;
		};
	};
}

#gag {^F[%1] S[%2/%3\%] B[%4]$}
#act {^F[%1] S[%2/%3\%] B[%4]$}{
	#var {my[form]}				{%1};
	#var {my[skill][name]}		{%2};
	#var {my[skill][current]}	{%3};
	#var {my[bioplasts]}		{%4};
	#if {"${form_avg[1][guildstring]}" == ""}{
		#delay {2}{db_query_form_damage;select_current_form_biome};
	};
	#if {"${biome_results[1][form]}" == ""}{
		db_list_biome form;
	};
	#if {"${my[form]}" == "white tail spider"}{
		#var {my[desired][perform]}{bite};
	}{
		#var {my[desired][perform]}{morph};
	};
	#if {"${my[current][perform]}" != "${my[desired][perform]}"}{
		!perform ${my[desired][perform]};
		#var {my[current][perform]}{${my[desired][perform]}};
	};
	update_status;
}

#alias {update_status} {
    #if {"$cooler" == "on" || $corpses[cooler] > 0} {
        #format {sb1_cooler} {%+2s} {$corpses[cooler]};
        #var {sb1_cooler} { CL:<130>$sb1_cooler<088>}
    } {
        #var {sb1_cooler} {}
    };

    #if {"$freezer" == "on" || $corpses[freezer] > 0} {
        #format {sb2_freezer} {%+2s} {$corpses[freezer]};
        #var {sb2_freezer} { FZ:<130>$sb2_freezer<088>}
    } {
        #var {sb2_freezer} {}
    };

	#var	{my[hp][graph]}		{@graph{$my[hp][current];$my[hp][max]}};
	#var	{my[sp][graph]}		{@graph{$my[sp][current];$my[sp][max]}};
	#var	{my[gp1][graph]}	{@graph{$my[gp1][current];100}};
	#var	{my[gp2][graph]}	{@graph{$my[gp2][current];100}};
	#var	{my[ff][graph]}		{@graph{$my[ff][current];100}};
	#var	{my[skill][graph]}	{@graph{$my[skill][current];100}};
	#var	{enemy[graph]}		{@graph{$enemy[hp];100}};
	#format {hp}				{%+4s} {@colscale{$my[hp][current];$my[hp][max]}};
	#format {hp_max}			{%+4s} {<128>$my[hp][max]<088>};
	#format {sp}				{%+4s} {@colscale{$my[sp][current];$my[sp][max]}};
	#format {sp_max}			{%+4s} {<128>$my[sp][max]<088>};
	#format {stam}				{%+8s} {@colscale{$my[gp1][current];100}};
	#format {pp}				{%+7s} {@colscale{$my[gp2][current];100}};
	#format {ff}				{%+8s} {@colscale{$my[ff][current];100}};
	#format {skill}				{%+8s} {@colscale{$my[skill][current];100}};
	#format {relin}				{%+2s} {$my[relinquish][current]};
	#format {relin_r}			{%+3s} {$my[relinquish][reset]};
	#format {bio}				{%+3s} {$my[bioplasts]};
    #format {round_damage}      {%-16s} {$my[damagetracker][foe] -> @rcolscale{$my[damagetracker][damage];2500}};
	#format {round_average}		{%+4s} {@rcolscale{$my[damagetracker][average];2500}};
	#format {ehealth}			{%+8s} {@colscale{$enemy[hp];100}\%};
    #format {corpses[inventory]}{%+2s} {$corpses[inventory]};
    #format {corpses[truck]}	{%+2s} {$corpses[truck]};
    #format {corpses[coffin]}	{%+2s} {$corpses[coffin]};
    #format {corpses[freezer]}	{%+2s} {$corpses[freezer]};
	#showme {<088>HP:${hp}/${hp_max} SP:${sp}/${sp_max} ST:${stam}%  PP:${pp}%  BP:${bio}    E: $round_damage} {-4};
	#showme {H:${my[hp][graph]} S:${my[sp][graph]} ST:${my[gp1][graph]} P:${my[gp2][graph]} R:${relin}/${relin_r}\% E:${enemy[graph]}} {-3};
	#showme {$mip[gline][1] $mip[gline][2]} {-6};
}

#alias {corpsetrig} {
	#NOP !unwrap corpse;
	#NOP #if {"$my[autocorpse][method]" == "guild"}{
	#NOP 	!bioextract;
	#NOP 	!give bioplast to clone;
	#NOP };
	#NOP #if {"$my[autocorpse][method]" == "nex"}{
	#NOP 	!orare;
	#NOP };
	#NOP !wrap corpse;
	!wrap corpse;
	!divvy;


	#if {$my[gp1][current] < 80 || $my[gp2][current] < 80} {
		.pause;
		#var resumebot 1;
	} {
		#if {$autokill} {ki};
	};
};

#alias {cco}{
	!unwrap corpse;
	!bioextract;
	#NOP !give corpse to nobody;
	!wrap corpse;
	
	#NOP #var coffin_full 1;
	#if {$bot} {
        .pause;
        donatecoffin;
        #var resumebot 1;
    }
};

#alias fa {
        !fuse all black;
        !fuse all dark;
        !fuse all murky;
        !fuse all turbid;
        !fuse all lucid;
        !fuse all milky;
        !fuse all opaque;
        !fuse all cloudy;
        !fuse all foggy;
        !fuse all translucent;
        !fuse all transparent;
        !fuse black and dark;
        !fuse black and murky;
        !fuse black and turbid;
        !fuse black and milky;
        !fuse black and opaque;
        !fuse dark and murky;
        !fuse dark and turbid;
        !fuse dark and milky;
        !fuse dark and opaque;
        !fuse murky and turbid;
        !fuse turbid and milky;
}

#act {Splat dealt the killing blow to %1.} {
	#var {my[damagetracker][submit]}{1};
	#if {"$my[autocorpse][method]" != "off"}{
		corpsetrig;
	};
}

#class {splat} {close}
