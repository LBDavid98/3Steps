#class killer {kill}
#class killer {open} 

#var critter_room 0 
#var player_room 0
#var starter 0
#var reversedir s
#var reverse_dir 0
#var findexit 0
#var area_aggro 0
#var automap 0
#var autogather 0
#var autokill 0
#var bot 0
#var stepignore 0

#nop {Make a global blacklist of critters to not stop on since they are followers, etc};
#var {global_blacklist}{Terrier;scorpion;CatBot;Valithyn;Dog;red squirrel;everybody;under the control of;betrayer;broodling;chromatic cuckoo owlet;tiny translucent;gemini};

#alias {make_global_blacklist}{
	#list {global[blacklist]}{create}{$global_blacklist};
	#list {global[blacklist]}{size}{global_blacklist_size};
};

make_global_blacklist;

#NOP Added for all the bots in the room.
#alias {autok}{
	#if {$autokill == 1}{
		#var autokill 0;
		#echo {Not Auto-attacking};
		show_area_selector;
	}{
		#var autokill 1;
		#echo {Auto-attacking};
		show_area_selector;
	};
};

#alias {.stop} {
	#var bot 0;
	#var autokill 0;
	#showme Bot Deactivated;
	update_status;
	show_area_selector;
}
#NOP Should only be called after already in the area to step through
#alias {.start} {
	#var bot 1;
	#var autokill 1;
	#showme Bot Activated;
	update_status;
	#var resumebot 1;
	show_area_selector;
}

#alias {.resume} {
	#if {$bot} {
		#var autokill 1;
		#showme Bot: Resuming;
		ki;
	} {
		#showme Bot currently deactivated;
	};
	update_status;
}

#alias {.pause} {
	#if {$bot} {
		#var autokill 0;
		#showme Bot: Paused;
	} {
		#showme Bot currently deactivated;
	};
	update_status;
};

#var {areaselector[rows]}{5}
#var {areaselector[page]}{1};
#var {areaselector[max]}{5};

#math selector[top] $chat[height]+$caption[height]+$exitpanel[height]+1;
#math selector[bottom] $selector[top]+8;
#alias {show_area_selector}{
	#screen clear square $selector[top] -42 $selector[bottom] -1;
	#draw <g09> rounded box $selector[top] -41 $selector[bottom] -3;
	#showme {<g09>[<099><<<g09>]-[<099>Area Selector<g09>]-[<099>>><g09>]<099>} $selector[top] -33;
	#NOP #showme {<128>[<099>Area Selector<128>]<099>} $selector[top] -39;
	#NOP #showme {<128>[<099><<<128>][<099>>><128>]<099>} $selector[top] -12;
	#button {$selector[top];-33;$selector[top];-29}{
		#math {targetarea}{${areaselector[current]} - 1};
		#if {$targetarea < 1}{#var targetarea ${queue_size}};
		go ${areaselector[roomnote][${targetarea}]};
	};
	#button {$selector[top];-14;$selector[top];-11}{
		#math {targetarea}{${areaselector[current]} + 1};
		#if {$targetarea > ${queue_size}}{#var targetarea 1};
		go ${areaselector[roomnote][${targetarea}]};
	};
	#NOP #if {${stepignore} == 2}{
	#NOP 	#showme {[<128>S<088>]} $selector[top] -36;
	#NOP }{
	#NOP 	#if {${stepignore} == 1}{
	#NOP 		#showme {[<128>W<088>]} $selector[top] -36;
	#NOP 	}{
	#NOP 		#showme {[<128>M<088>]} $selector[top] -36;
	#NOP 	};
	#NOP };
	#NOP #button {$selector[top];-36;$selector[top];-33}{si};
	#if {${autoqueue} == 1}{
		#showme {[<128>Q<088>]} $selector[top]+1 -7;
	}{
		#showme {[<faa>Q<088>]} $selector[top]+1 -7;
	};
	#button {$selector[top]+1;-7;$selector[top]+1;-5}{autoq};
	#showme {[<128>GO<088>]} $selector[top]+1 -29;
	#button {$selector[top]+1;-29;$selector[top]+1;-26}{ki};
	#showme {[<128>KK<088>]} $selector[top]+1 -18;
	#button {$selector[top]+1;-18;$selector[top]+1;-13}{kk};
	#NOP #if {${autokill} == 1}{
	#NOP 	#showme {[<128>A<088>]} $selector[top]+1 -7;
	#NOP }{
	#NOP 	#showme {[<faa>M<088>]} $selector[top]+1 -7;
	#NOP };
	#NOP #button {$selector[top]+1;-7;$selector[top]+1;-5}{autok};
	#math {areaselector[start]}{${areaselector[rows]} * ${areaselector[page]}};
	#math {areaselector[end]}{${areaselector[rows]} * ${areaselector[page]} - ${areaselector[rows]} + 1};
	#line sub {var} #draw {tile} $selector[top]+3 -35 $selector[bottom]-1 -4 ${areaselector[text][-$areaselector[start]..-$areaselector[end]]};
	#var {start_row}{$selector[top]+2};
	#var {areaselector[current]}{0};
	#if {$queue_size > 0}{
		#loop {1}{${queue_size}}{queue_count}{
			#math {indicator}{$start_row + $queue_count};
			#showme {${queue_count}.} ${indicator} -38;
			#if {"${area}" == "${areaselector[roomarea][${queue_count}]}"}{
				#showme {<abe>><099>} ${indicator} -40;
				#var {areaselector[current]}{${queue_count}};
			};
		};
	};
	#button {$selector[top]+3;-36;$selector[top]+3;-5}{
		fbrm 1;
		show_area_selector;
	};
	#button {$selector[top]+4;-36;$selector[top]+4;-5}{
		fbrm 2;
		show_area_selector;
	};
	#button {$selector[top]+5;-36;$selector[top]+5;-5}{
		fbrm 3;
		show_area_selector;
	};
	#button {$selector[top]+6;-36;$selector[top]+6;-5}{
		fbrm 4;
		show_area_selector;
	};
	#button {$selector[top]+7;-36;$selector[top]+7;-5}{
		fbrm 5;
		show_area_selector;
	};
	#NOP #button {$selector[top]+7;-36;$selector[top]+7;-5}{
	#NOP 	fbrm 6;
	#NOP 	show_area_selector;
	#NOP };
};

#alias {fbq}{
	#unvar notes;
	#unvar newarea;
	#var {name_len}{17};
	#var {note_len}{8};
	#if {"%1" != ""}{
		#map list {roomnote}{%i%*%0%*}{variable}{noterooms};
		#foreach {*noterooms[]}{room}{
			#map get {roomnote}{notes[$room]}{$room};
			#map get {roomarea}{newarea[$room]}{$room};
		};
		#format {note_trunc}{%-${note_len}s}{${notes[${room}]}};
		#format {note_trunc}{%.${note_len}s}{${note_trunc}};
		#format {name_trunc}{%-${name_len}s}{${newarea[${room}]}};
		#format {name_trunc}{%.${name_len}s}{${name_trunc}};
		#if {&areaselector[text][] >= ${areaselector[max]}}{
			#list areaselector[text] del 1;
			#list areaselector[roomarea] del 1;
			#list areaselector[roomnote] del 1;
		};
		#list {areaselector[text]}{size}{queue_size};
		#math {queue_size}{$queue_size + 1};
		#list areaselector[text] ins -1 {${note_trunc}<g09>::<099>${name_trunc} \[<faa>-<088>\]};
		#list areaselector[roomarea] ins -1 {${newarea[${room}]}};
		#list areaselector[roomnote] ins -1 {${notes[${room}]}};
		show_area_selector;
	}{
		#var {areaselector[text]};
	};
};

#alias {fb_default}{
	fbq donuts;
	fbq uo1;
	fbq ccows;
	fbq d2hell;
	fbq aegisl1;
	fbq acidloths;
};

#alias {fbrm}{
	#list areaselector[text] del %0;
	#list areaselector[roomarea] del %0;
	#list areaselector[roomnote] del %0;
	#list {areaselector[text]}{size}{queue_size};
	show_area_selector;
};

#alias {fbnext}{
	#math {targetarea}{${areaselector[current]} + 1};
	#if {$targetarea > ${queue_size}}{#var targetarea 1};
	go ${areaselector[roomnote][${targetarea}]};
};

#alias {fbprev}{
	#math {targetarea}{${areaselector[current]} - 1};
	#if {$targetarea < 1}{#var targetarea ${queue_size}};
	go ${areaselector[roomnote][${targetarea}]};
};


#alias {si}{
	#if {$stepignore != 1}{
		#if {$manual_stepper != 1}{
			#echo {Using Manual Stepper};
			#var {manual_stepper}{1};
			#var stepignore 2;
		}{
			#echo {Using Magic Wanderer};
			#var {manual_stepper}{0};
			#var stepignore 1;
		};
	}{
		#echo {Using Magic Stepper};
		#var manual_stepper 0;
		#var stepignore 0;
	};
	show_area_selector;
};

#act {AREA NAME: %1 [%2]} {
	#var {area}{%1};
	show_area_selector;

	make_roomlist {$area};
	#if {$do_queue2 == 1}{
		#map get {roomarea}{my_area};
		#if {"$my_area" != ""}{
			#var {area}{$my_area};
		};
		#var do_queue2 0;
		ki;
	};
}

#act {AREA RATING -> %1 [%2]}{
	#var {area}{%2};
	show_area_selector;
	
	make_roomlist {$area};
	#if {$do_queue2 == 1}{
		#map get {roomarea}{my_area};
		#if {"$my_area" != ""}{
			#var {area}{$my_area};
		};
		#var do_queue2 0;
		ki;
	};
}

#alias {make_killpath}{
	#map {find}{%0};
	#unvar {kill_path2};
	#list {kill_path2}{clear};
	#path {save}{forward}{kill_path2};
	#list {kill_path2}{create}{$kill_path2};
	#list {kill_path2}{size}{path_size};
	#var {path_index}{1};
};

#alias {make_roomlist}{
	#map list {roomarea}{%0}{variable}{my_roomlist};
	#list {roomlist}{create}{*my_roomlist[]};
	#list {roomlist}{size}{area_size};
	#if {$area_size > 1}{
		#if {$do_return == 1}{
			#var {room_index}{$return_room_index};
			#var {do_return}{0};
		}{
			#var {room_index}{1};
		};
		#if {${roomvnum} == ${roomlist[${room_index}]}}{
			#math {room_index}{$room_index + 1};
		};
		make_killpath {${roomlist[${room_index}]}};
		#unvar my_roomlist;
	};
	#if {"$blacklist" != ""}{
		#list {critter[blacklist]}{create}{$blacklist};
		#list {critter[blacklist]}{size}{blacklist_size};
	};
	#if {"${whitelist}" != ""}{
		#list {critter[whitelist]}{create}{$whitelist};
		#list {critter[whitelist]}{size}{whitelist_size};
	};
}

#alias {steptest}{
    #if {$stepper == 1}{
        #math {room_num}{$room_num + 1};
        $kill_path[$room_num];
        #map map;
        #showme {You are on Room $room_num};
    };
}

#act {You bounce right off the gelatinous wall.}{
	#map undo;
	#var {desired_dir}{s};
	dirfunction {$desired_dir};
}

#act {Too heavy.}{
	#var domove2 0;
	#var starter2 0;
}

#act {%1 is too heavy for Ventra's secret chest}{
	#var domove2 0;
	#var starter2 0;
}

#act {gold coins.} {
	#if {$player_room == 0} {
        !divvy coins;
    };
}

#alias {mysearch}{
	#var {searchstring}{%0};
	#echo {Searching for $searchstring};
}

#act {^=M= %*} {
	#math {critter_room}{$critter_room + 1};
	#format {tkstr}{%l}{%1};
	#var {critter_short_desc}{$tkstr};

	#if {"$searchstring" != ""}{
		#regex {$tkstr}{$searchstring}{
			#bell;
			#bell;
			#map get {roomvnum}{foundroom};
			#echo {***** Found $searchstring in room $foundroom****}
		};
	};

	#if {"$guild" == "mages"}{
		#regex {$tkstr}{%* (%*)}{
			#var tkstr none;
			#math {critter_room}{$critter_room - 1}
		};
	};

	#if {"$guild" == "changeling"} {
		#regex {$tkstr}{small puddle of slime} {
			#var tkstr none;
			#math {critter_room}{$critter_room - 1};
		};
		#NOP #regex {$tkstr}{tiny translucent bombardier beetle}{
		#NOP 	#var tkstr none;
		#NOP 	#math {critter_room}{$critter_room - 1}
		#NOP };
		#NOP #regex {$tkstr}{tiny translucent wandering spider}{
		#NOP 	#var tkstr none;
		#NOP 	#math {critter_room}{$critter_room - 1}
		#NOP };
	};
	#if {"$tkstr" != "none" && "$guild" == "changeling" && "$area" == "Changeling Biome"}{
		#format {timestamp} {%t} {[<268>%H<088>:<268>%M<088>] };
		#format {dbtimestamp} {%t} {[%Y:%m:%d %H:%M:%S]};
		update_chat ${timestamp}<178>Biome<088>: $tkstr;
		db_submit_chat ${dbtimestamp}Biome: $tkstr;
	};
	#regex {$tkstr}{%* attacking you%*}{#var tkstr &1};
	#regex {$tkstr}{%*(%d\%)}{#var tkstr &1};
	#regex {$tkstr}{%*attacking you%*}{#var tkstr &1};
	#regex {$tkstr}{%* [%*]%*}{#var tkstr &1};
	#regex {$tkstr}{[%*] %*}{#var tkstr &2};
	#regex {$tkstr}{%*[%*]%*}{#var tkstr &1};
	#if {"${critter[blacklist]}" != ""}{
		#loop {1}{$blacklist_size}{critter_count}{
			#regex {$tkstr}{${critter[blacklist][${critter_count}]}}{
				#var tkstr none;
				#math {critter_room}{$critter_room - 1};
			};
		};
	};
	#if {"${global[blacklist]}" != ""}{
		#loop {1}{$global_blacklist_size}{critter_count}{
			#regex {$tkstr}{${global[blacklist][${critter_count}]}}{
				#var tkstr none;
				#math {critter_room}{$critter_room - 1};
			};
		};
	};
	#var wtkstr {none};
	#if {"${critter[whitelist]}" != ""}{
		#loop {1}{$whitelist_size}{critter_count}{
			#regex {$tkstr}{${critter[whitelist][${critter_count}]}}{
				#var {wtkstr}{$tkstr};
			};
		};
		#if {"$wtkstr" == "none"}{
			#var {$tkstr is not on the whitelist};
			#var tkstr none;
			#math {critter_room}{$critter_room - 1};
		};
	};
	#regex {$tkstr}{%* %w.$}{#var tkstr &2};
	#regex {$tkstr}{%* %w$}{#var tkstr &2};
	#regex {$tkstr}{%* %S$}{#var tkstr &1};
	#regex {$tkstr}{%* %w.$}{#var tkstr &2};
	#regex {$tkstr}{%w.$}{#var tkstr &1};
	#regex {$tkstr}{%* %w}{#var tkstr &2};
	#if {"$tkstr" != "none"}{
		#var kstr $tkstr;
	};
	#if {"$area" == "Changeling Biome" && $starter2 != 1 && $domove2 == 1}{
		bscan;
	};
}{9};

#NOP An already damaged mob is considered equiv to another player present
#act {^=M= %*\[%*\]} {
	#math {player_room}{$player_room + 1};
}

#act {^=P= %*} {
    #math {player_room}{$player_room + 1};
}


#act {^=I= %*} {
    #format {item}{%l}{%1};
    #if {$player_room == 0} {
        #regex {$item} {gold coins} {!divvy coins};
    };

    #loop {1}{$all_area_items}{count} {
        #regex {$item}{$area_items[$count]} {
            #list {item_list}{add}{$area_items[$count]};
            #list {item_list}{size}{total_items};
        };
    };
}

#alias {dirfunction}{
    #if {"%1" == "s"}{#var reversedir n;s};
    #if {"%1" == "e"}{#var reversedir w;e};
    #if {"%1" == "w"}{#var reversedir e;w};
    #if {"%1" == "n"}{#var reversedir s;n};
    #if {"%1" == "sw"}{#var reversedir ne;sw};
    #if {"%1" == "se"}{#var reversedir nw;se};
    #if {"%1" == "nw"}{#var reversedir se;nw};
    #if {"%1" == "ne"}{#var reversedir sw;ne};
}


#alias ki {
	#if {$domove2 == 1}{
		#var domove2 0;
		#NOP #var starter2 0;
		#var player_room 0;
		#var critter_room 0;
	}{
		#var critter_room 0;
		#var player_room 0;
		#var domove2 1;
		#NOP #var starter2 1;
		#if {$stepignore > 0}{
			#var stepper2 0;
			#map {flag}{static}{off};
		}{
			#if {$room_index <= $area_size}{
				make_killpath {${roomlist[${room_index}]}};
			};
			#var stepper2 1;
		};
		#if {"$guild" == "angel" && $my[desecrate] == 1}{
			!cease;
		};
		glance;
	};
}

#alias {gather_items}{
	#if {$total_items > 0}{
		#loop {1}{$total_items}{count}{
		!get ${item_list[$count]};
		#if {"$area" == "csewers" && "$guild" == "mage"}{
			id ${item_list[$count]};
		};
		pck ${item_list[$count]};
	};
		#list {item_list}{clear};
		#unvar item_list;
	};
}

#alias {autoq}{
	#if {$autoqueue == 1}{
		#echo {No longer queueing};
		#var autoqueue 0;
		show_area_selector;
	}{
		#echo {Queueing};
		#var autoqueue 1;
		show_area_selector;
	};
};

#alias {step_function}{
	#if {${stepper2} == 1}{
		${kill_path2[${path_index}]};
		#math {path_index}{$path_index + 1};
		#if {${path_index} > ${path_size}}{
			#math {room_index}{${room_index} + 1};
			#math {tmp_size}{$area_size + 1};
			#if {$room_index > $tmp_size}{
				#var {room_index}{1};
				#if {$autoqueue == 1}{
					#math {targetarea}{${areaselector[current]} + 1};
					#if {${targetarea} > ${queue_size}}{.stop;go home;#var autoqueue 0;break;};
					#var {do_queue2}{1};
					go ${areaselector[roomnote][${targetarea}]};
					rating;
				}{
					make_killpath {${roomlist[${room_index}]}};
				};
			}{
				#if {$room_index <= $area_size}{
					make_killpath {${roomlist[${room_index}]}};
				};
			};
		};
	} {
		#if {$manual_stepper == 1}{
			#nop {If we aren't using the magic stepper, check for a manual path};
			#math {room_num}{$room_num + 1};
			#if {$room_num > $max_room}{
				#if {$autoqueue == 1}{
					#math {targetarea}{$my[areaselector][current] + 1};
					#if {$targetarea > 6}{#var {targetarea}{1}};
					#var {room_num}{1};
					#var {starter2}{0};
					go ${my[areaselector][${targetarea}][note]};
				};
			}{
				${kill_path[${room_num}]};
			};
		}{
		#nop {If we aren't specifying a manual path, we are wandering aimlessly};
			dirfunction $desired_dir;
		};
	};
};

#NOP Disabled code forces the bot to stay in a room until clear
#NOP Normally, starter2 is used to 'ignore' stuff in current room and move on
#alias kill-loop {
	#if {$starter2 == 1}{
		step_function;
		#var {starter2}{0};
		#var {domove2}{1};
	}{
		#if {${player_room} == 0}{ 
			#if {${autogather} == 1}{
				gather_items;
			};
			#if {${critter_room} > 0}{
				#var domove2 0;
				#if {$autokill} {
					#if {"$mud" == "3s"} {
						#math {kill_delay} {1d4};
						#delay {$kill_delay} {kill $kstr};
					} {
						kill $kstr;
					};
				};
			}{
				step_function;
			};
		} {
			step_function;
		};
	};
}

#alias dir_selection {
	#var good_dir 0;
	#var max_rand 0;
	#if {$domove2 == 1}{
		#if {$room_exits == 1}{
			#var desired_dir ${room_dirs[1]};
		}{
			#if {$room_exits == 2}{
				#if {$upexit == 1}{
					#var desired_dir ${room_dirs[2]};
					#var good_dir 1;
				};
				#if {$upexit == 2}{
					#var desired_dir ${room_dirs[1]};
					#var good_dir 1;
				};
			};
			#while {$good_dir == 0 && $max_rand < 100}{
				#math {max_rand}{$max_rand + 1};
				#math {desired_num}{1 d $room_exits};
				#if {$desired_num != $upexit}{
					#if {$desired_num != $reverse_dir}{
						#var {desired_dir}{${room_dirs[$desired_num]}};
						#var good_dir 1;
					};
				};
			};
			#if {"$room_short_desc" == "The east gate of Lut Gholein"}{
				#var {desired_dir}{e};
				#var good_dir 1;
			};
			#if {"$room_short_desc" == "The town square"}{
				#var {desired_dir}{e};
				#var good_dir 1;
			};
		};
		#if {$findexit == 1}{
			kill-loop;
		}{
			#if {"$mapping" == "on"}{
				#delay {0.15}{kill-loop};
			}{
				#delay {0.05}{kill-loop};
			};
		};
	};
}

#class killer {close}
